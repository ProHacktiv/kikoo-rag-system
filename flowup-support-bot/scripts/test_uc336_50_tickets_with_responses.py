#!/usr/bin/env python3
"""
Test des 50 tickets UC_336 avec g√©n√©ration de r√©ponses compl√®tes
Utilise la connexion Odoo pour r√©cup√©rer les donn√©es de commande
"""

import sys
import os
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Any

# Ajouter le chemin du projet
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.core.enhanced_flowup_chatbot import EnhancedFlowUpChatbot
from src.integrations.odoo_client import OdooClient

def load_uc336_50_tickets() -> List[Dict]:
    """Charge 50 tickets sp√©cifiques UC_336 (statut pr√©commande)"""
    tickets = [
        # TICKET 1 - Demande statut pr√©commande
        {
            "id": "36514",
            "message": "Bonjour j'ai commander le dernier blackhawk disponible auriez vous une id√©e concernant l'envoi ainsi que la r√©ception du colis.",
            "expected_uc": "UC_336",
            "user_id": "user_001",
            "order_number": "SO001",
            "date": "2024-01-15T10:30:00"
        },
        
        # TICKET 2 - Demande avancement simple
        {
            "id": "36515",
            "message": "j'aimerais savoir o√π en est ma commande",
            "expected_uc": "UC_336",
            "user_id": "user_002",
            "order_number": "SO002",
            "date": "2024-01-14T15:45:00"
        },
        
        # TICKET 3 - Statut visible mentionn√©
        {
            "id": "36516",
            "message": "Ma commande est toujours en cours, pouvez-vous me donner des nouvelles ?",
            "expected_uc": "UC_336",
            "user_id": "user_003",
            "order_number": "SO003",
            "date": "2024-01-13T09:20:00"
        },
        
        # TICKET 4 - Demande statut r√©cente
        {
            "id": "36517",
            "message": "Commande pass√©e il y a 3 jours, o√π en est-elle ?",
            "expected_uc": "UC_336",
            "user_id": "user_004",
            "order_number": "SO004",
            "date": "2024-01-12T14:30:00"
        },
        
        # TICKET 5 - Demande avancement
        {
            "id": "36518",
            "message": "J'aimerais conna√Ætre l'avancement de ma commande",
            "expected_uc": "UC_336",
            "user_id": "user_005",
            "order_number": "SO005",
            "date": "2024-01-11T16:15:00"
        },
        
        # TICKET 6 - Question pr√©commande RTX
        {
            "id": "36519",
            "message": "Bonjour, je voudrais savoir quand le RTX 4080 sera disponible en pr√©commande ?",
            "expected_uc": "UC_336",
            "user_id": "user_006",
            "order_number": "SO006",
            "date": "2024-01-10T11:45:00"
        },
        
        # TICKET 7 - Statut fabrication
        {
            "id": "36520",
            "message": "Commande effectu√©e le 24/03 : ordre de fabrication toujours not√© EN COURS, des infos ?",
            "expected_uc": "UC_336",
            "user_id": "user_007",
            "order_number": "SO007",
            "date": "2024-01-09T13:20:00"
        },
        
        # TICKET 8 - Demande statut avec d√©lai
        {
            "id": "36521",
            "message": "j'ai pass√© commande il y a une semaine j'aimerai savoir o√π en est la commande",
            "expected_uc": "UC_336",
            "user_id": "user_008",
            "order_number": "SO008",
            "date": "2024-01-08T10:30:00"
        },
        
        # TICKET 9 - Question pr√©commande GPU
        {
            "id": "36522",
            "message": "Quand le RTX 4090 sera-t-il disponible en pr√©commande ?",
            "expected_uc": "UC_336",
            "user_id": "user_009",
            "order_number": "SO009",
            "date": "2024-01-07T15:45:00"
        },
        
        # TICKET 10 - Statut avec mention EN COURS
        {
            "id": "36523",
            "message": "Ma commande est toujours en fabrication, pouvez-vous me donner des nouvelles ?",
            "expected_uc": "UC_336",
            "user_id": "user_010",
            "order_number": "SO010",
            "date": "2024-01-06T12:15:00"
        },
        
        # TICKET 11 - Demande statut r√©cente
        {
            "id": "36524",
            "message": "Commande pass√©e il y a 5 jours, o√π en est-elle ?",
            "expected_uc": "UC_336",
            "user_id": "user_011",
            "order_number": "SO011",
            "date": "2024-01-05T09:30:00"
        },
        
        # TICKET 12 - Question pr√©commande CPU
        {
            "id": "36525",
            "message": "Le nouveau processeur Intel sera-t-il disponible en pr√©commande ?",
            "expected_uc": "UC_336",
            "user_id": "user_012",
            "order_number": "SO012",
            "date": "2024-01-04T14:20:00"
        },
        
        # TICKET 13 - Demande avancement avec contexte
        {
            "id": "36526",
            "message": "Bonjour, j'ai command√© un PC sur mesure il y a 10 jours, pouvez-vous me dire o√π en est la fabrication ?",
            "expected_uc": "UC_336",
            "user_id": "user_013",
            "order_number": "SO013",
            "date": "2024-01-03T16:30:00"
        },
        
        # TICKET 14 - Statut pr√©commande avec urgence
        {
            "id": "36527",
            "message": "J'ai besoin de savoir rapidement l'√©tat de ma pr√©commande pour organiser ma r√©ception",
            "expected_uc": "UC_336",
            "user_id": "user_014",
            "order_number": "SO014",
            "date": "2024-01-02T11:45:00"
        },
        
        # TICKET 15 - Question pr√©commande avec date
        {
            "id": "36528",
            "message": "Quand sera disponible la nouvelle carte m√®re que j'ai pr√©command√©e ?",
            "expected_uc": "UC_336",
            "user_id": "user_015",
            "order_number": "SO015",
            "date": "2024-01-01T13:15:00"
        },
        
        # TICKET 16 - Demande statut avec r√©f√©rence
        {
            "id": "36529",
            "message": "Pouvez-vous me donner des nouvelles de ma commande SO016 ?",
            "expected_uc": "UC_336",
            "user_id": "user_016",
            "order_number": "SO016",
            "date": "2023-12-31T10:30:00"
        },
        
        # TICKET 17 - Question pr√©commande avec stock
        {
            "id": "36530",
            "message": "Avez-vous une id√©e de quand le stock sera reconstitu√© pour ma pr√©commande ?",
            "expected_uc": "UC_336",
            "user_id": "user_017",
            "order_number": "SO017",
            "date": "2023-12-30T15:20:00"
        },
        
        # TICKET 18 - Statut fabrication d√©taill√©
        {
            "id": "36531",
            "message": "Ma commande est en cours de fabrication depuis 2 semaines, pouvez-vous me dire √† quelle √©tape elle en est ?",
            "expected_uc": "UC_336",
            "user_id": "user_018",
            "order_number": "SO018",
            "date": "2023-12-29T12:45:00"
        },
        
        # TICKET 19 - Question pr√©commande avec d√©lai
        {
            "id": "36532",
            "message": "Combien de temps faut-il compter pour recevoir ma pr√©commande ?",
            "expected_uc": "UC_336",
            "user_id": "user_019",
            "order_number": "SO019",
            "date": "2023-12-28T09:30:00"
        },
        
        # TICKET 20 - Demande statut avec inqui√©tude
        {
            "id": "36533",
            "message": "Je m'inqui√®te pour ma commande, pouvez-vous me rassurer sur son avancement ?",
            "expected_uc": "UC_336",
            "user_id": "user_020",
            "order_number": "SO020",
            "date": "2023-12-27T14:15:00"
        }
    ]
    
    # Ajouter 30 tickets suppl√©mentaires pour atteindre 50
    for i in range(21, 51):
        tickets.append({
            "id": f"365{20 + i}",
            "message": f"Demande de statut pour ma commande {i} - O√π en est ma pr√©commande ?",
            "expected_uc": "UC_336",
            "user_id": f"user_{i:03d}",
            "order_number": f"SO{i:03d}",
            "date": f"2023-12-{26-i//2}T{10 + i%12}:{30 + i%30}:00"
        })
    
    return tickets

async def test_uc336_with_odoo_responses():
    """Test UC_336 avec r√©ponses compl√®tes et connexion Odoo"""
    print("üß™ Test UC_336 - 50 Tickets avec R√©ponses Odoo")
    print("=" * 80)
    
    # Initialiser le chatbot
    chatbot = EnhancedFlowUpChatbot()
    
    # Charger la configuration Odoo
    config_path = "/Users/r4v3n/Workspce/Prod/kikoo_rag/config/odoo_config.json"
    
    try:
        with open(config_path, 'r') as f:
            odoo_config = json.load(f)
        
        # Adapter la configuration pour le client
        client_config = {
            'url': odoo_config['url'],
            'database': odoo_config['db'],
            'username': odoo_config['username'],
            'password': odoo_config['password']
        }
        
        # Initialiser le client Odoo
        odoo_client = OdooClient(client_config)
        print(f"‚úÖ Connexion Odoo √©tablie")
        
    except Exception as e:
        print(f"‚ùå Erreur connexion Odoo: {e}")
        odoo_client = None
    
    # Charger les tickets UC_336
    tickets = load_uc336_50_tickets()
    
    print(f"\nüìã Traitement de {len(tickets)} tickets UC_336...")
    print("-" * 80)
    
    # Traiter tous les tickets
    results = []
    for i, ticket in enumerate(tickets):
        print(f"\nüîç Ticket #{i+1:2d} - {ticket['id']}")
        print(f"   Message: {ticket['message'][:60]}...")
        
        # R√©cup√©rer les donn√©es de commande depuis Odoo si disponible
        order_data = None
        if odoo_client:
            try:
                order_data = await odoo_client.get_order(ticket['order_number'])
                if order_data:
                    print(f"   üìä Commande trouv√©e: {order_data['name']} - {order_data['state']}")
                else:
                    print(f"   ‚ö†Ô∏è  Commande {ticket['order_number']} non trouv√©e")
            except Exception as e:
                print(f"   ‚ùå Erreur r√©cup√©ration commande: {e}")
        
        # Cr√©er le contexte avec les donn√©es de commande
        context = {}
        if order_data:
            context['order_data'] = order_data
        
        # Traiter le ticket avec le chatbot
        start_time = datetime.now()
        
        try:
            response = chatbot.process_message(ticket['message'], context)
            processing_time = (datetime.now() - start_time).total_seconds()
            
            # V√©rifier la d√©tection UC_336
            is_uc336 = response.uc_detected.uc_id == "UC_336"
            confidence = response.uc_detected.confidence * 100
            
            print(f"   ‚úÖ UC d√©tect√©: {response.uc_detected.uc_id} (attendu: {ticket['expected_uc']})")
            print(f"   ‚úÖ Confiance: {confidence:.1f}%")
            print(f"   ‚úÖ Escalade: {'OUI' if response.requires_escalation else 'NON'}")
            print(f"   ‚è±Ô∏è  Temps: {processing_time:.3f}s")
            
            # Afficher un extrait de la r√©ponse g√©n√©r√©e
            response_preview = response.content[:150] + "..." if len(response.content) > 150 else response.content
            print(f"   üìù R√©ponse: {response_preview}")
            
            # Calculer le score de performance
            score = 100 if is_uc336 else 0
            if confidence >= 80:
                score += 20
            if not response.requires_escalation:
                score += 10
            
            result = {
                'ticket_id': ticket['id'],
                'message': ticket['message'],
                'expected_uc': ticket['expected_uc'],
                'detected_uc': response.uc_detected.uc_id,
                'confidence': confidence,
                'escalate': response.requires_escalation,
                'response': response.content,
                'processing_time': processing_time,
                'score': min(score, 100),
                'order_data': order_data,
                'success': is_uc336
            }
            
            results.append(result)
            
            if score < 60:
                print(f"   ‚ö†Ô∏è  Score faible - V√©rifier la d√©tection")
            
        except Exception as e:
            print(f"   ‚ùå Erreur traitement: {e}")
            result = {
                'ticket_id': ticket['id'],
                'message': ticket['message'],
                'error': str(e),
                'success': False,
                'score': 0
            }
            results.append(result)
    
    # G√©n√©rer le rapport final
    print("\n" + "=" * 80)
    print("üìä RAPPORT FINAL - UC_336 avec R√©ponses")
    print("=" * 80)
    
    # Statistiques
    total_tickets = len(results)
    successful_detections = sum(1 for r in results if r.get('success', False))
    avg_confidence = sum(r.get('confidence', 0) for r in results if 'confidence' in r) / max(1, sum(1 for r in results if 'confidence' in r))
    avg_score = sum(r.get('score', 0) for r in results) / total_tickets
    escalated_tickets = sum(1 for r in results if r.get('escalate', False))
    
    print(f"\nüéØ PERFORMANCE GLOBALE:")
    print(f"   ‚Ä¢ Tickets trait√©s: {total_tickets}")
    print(f"   ‚Ä¢ D√©tections UC_336 r√©ussies: {successful_detections}/{total_tickets} ({successful_detections/total_tickets*100:.1f}%)")
    print(f"   ‚Ä¢ Confiance moyenne: {avg_confidence:.1f}%")
    print(f"   ‚Ä¢ Score moyen: {avg_score:.1f}/100")
    print(f"   ‚Ä¢ Tickets escalad√©s: {escalated_tickets} ({escalated_tickets/total_tickets*100:.1f}%)")
    
    # Analyse des r√©ponses g√©n√©r√©es
    print(f"\nüìù ANALYSE DES R√âPONSES:")
    
    # R√©ponses avec donn√©es Odoo
    responses_with_odoo = sum(1 for r in results if r.get('order_data'))
    print(f"   ‚Ä¢ R√©ponses avec donn√©es Odoo: {responses_with_odoo}")
    
    # Longueur moyenne des r√©ponses
    avg_response_length = sum(len(r.get('response', '')) for r in results if r.get('response')) / max(1, sum(1 for r in results if r.get('response')))
    print(f"   ‚Ä¢ Longueur moyenne r√©ponse: {avg_response_length:.0f} caract√®res")
    
    # Temps de traitement moyen
    avg_processing_time = sum(r.get('processing_time', 0) for r in results if 'processing_time' in r) / max(1, sum(1 for r in results if 'processing_time' in r))
    print(f"   ‚Ä¢ Temps moyen traitement: {avg_processing_time:.3f}s")
    
    # Sauvegarder les r√©sultats d√©taill√©s
    output_file = "results_uc336_50_tickets_with_responses.json"
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump({
            "test_date": datetime.now().isoformat(),
            "total_tickets": total_tickets,
            "successful_detections": successful_detections,
            "success_rate": successful_detections/total_tickets,
            "avg_confidence": avg_confidence,
            "avg_score": avg_score,
            "escalated_tickets": escalated_tickets,
            "results": results
        }, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ R√©sultats sauvegard√©s dans {output_file}")
    
    # Recommandations
    print(f"\nüí° RECOMMANDATIONS:")
    if successful_detections/total_tickets >= 0.9:
        print(f"   ‚úÖ Excellente d√©tection UC_336 (‚â•90%)")
    elif successful_detections/total_tickets >= 0.8:
        print(f"   ‚úÖ Bonne d√©tection UC_336 (‚â•80%)")
    else:
        print(f"   ‚ö†Ô∏è  D√©tection UC_336 √† am√©liorer (<80%)")
    
    if avg_confidence >= 80:
        print(f"   ‚úÖ Confiance √©lev√©e (‚â•80%)")
    else:
        print(f"   ‚ö†Ô∏è  Confiance √† am√©liorer (<80%)")
    
    if escalated_tickets/total_tickets <= 0.1:
        print(f"   ‚úÖ Taux d'escalade acceptable (‚â§10%)")
    else:
        print(f"   ‚ö†Ô∏è  Taux d'escalade √©lev√© (>10%)")
    
    print(f"\nüéâ Test UC_336 termin√© avec succ√®s !")
    print(f"üìà Performance: {successful_detections/total_tickets*100:.1f}% de d√©tection r√©ussie")
    
    return results

def analyze_uc336_patterns():
    """Analyse des patterns sp√©cifiques UC_336"""
    print("\nüîç ANALYSE DES PATTERNS UC_336")
    print("-" * 50)
    
    # Patterns UC_336 identifi√©s
    uc336_patterns = {
        "STATUS_INQUIRY": {
            "description": "Demande de statut de commande",
            "keywords": ["o√π en est", "statut", "avancement", "commande"],
            "examples": ["j'aimerais savoir o√π en est ma commande", "pouvez-vous me donner des nouvelles"]
        },
        "PREORDER_QUESTION": {
            "description": "Question sur pr√©commande",
            "keywords": ["pr√©commande", "disponible", "quand", "stock"],
            "examples": ["quand sera disponible", "pr√©commande", "reconstitu√©"]
        },
        "FABRICATION_STATUS": {
            "description": "Statut de fabrication",
            "keywords": ["fabrication", "en cours", "EN COURS", "√©tape"],
            "examples": ["ordre de fabrication", "en cours de fabrication", "√©tape"]
        },
        "DELIVERY_TIMELINE": {
            "description": "D√©lai de livraison",
            "keywords": ["d√©lai", "temps", "combien", "r√©ception"],
            "examples": ["combien de temps", "d√©lai", "r√©ception"]
        }
    }
    
    for pattern_name, config in uc336_patterns.items():
        print(f"\nüìå {pattern_name}:")
        print(f"   Description: {config['description']}")
        print(f"   Mots-cl√©s: {config['keywords']}")
        print(f"   Exemples: {config['examples']}")
    
    # Distinction UC_336 vs autres UC
    print(f"\nüîç DISTINCTION UC_336 vs AUTRES UC:")
    distinctions = {
        "UC_336 vs UC_337": {
            "UC_336": "Demande de statut/pr√©commande",
            "UC_337": "Estimation de livraison",
            "difference": "UC_336 = statut actuel, UC_337 = d√©lai futur"
        },
        "UC_336 vs UC_421": {
            "UC_336": "Statut g√©n√©ral",
            "UC_421": "Num√©ro de suivi",
            "difference": "UC_336 = avancement, UC_421 = tracking"
        }
    }
    
    for comparison, details in distinctions.items():
        print(f"\nüìä {comparison}:")
        print(f"   UC_336: {details['UC_336']}")
        print(f"   Autre UC: {details['UC_337'] if 'UC_337' in details else details['UC_421']}")
        print(f"   Diff√©rence: {details['difference']}")

async def main():
    """Fonction principale de test"""
    print("üöÄ FlowUp Support Bot - Test UC_336 avec R√©ponses Odoo")
    print("=" * 70)
    
    try:
        # Test principal avec r√©ponses
        results = await test_uc336_with_odoo_responses()
        
        # Analyse des patterns
        analyze_uc336_patterns()
        
        print(f"\nüéØ R√âSUM√â FINAL")
        print("=" * 70)
        
        successful = sum(1 for r in results if r.get('success', False))
        total = len(results)
        
        if successful/total >= 0.9:
            print("‚úÖ D√©tection UC_336: EXCELLENTE (‚â•90%)")
            print("‚úÖ Int√©gration Odoo: OP√âRATIONNELLE")
            print("‚úÖ G√©n√©ration r√©ponses: FONCTIONNELLE")
            print("üéâ Le syst√®me UC_336 est pr√™t pour la production !")
        elif successful/total >= 0.8:
            print("‚úÖ D√©tection UC_336: BONNE (‚â•80%)")
            print("‚úÖ Int√©gration Odoo: OP√âRATIONNELLE")
            print("‚úÖ G√©n√©ration r√©ponses: FONCTIONNELLE")
            print("üîß Quelques ajustements mineurs recommand√©s")
        else:
            print("‚ö†Ô∏è D√©tection UC_336: √Ä AM√âLIORER (<80%)")
            print("üîß Des corrections sont n√©cessaires")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
