#!/usr/bin/env python3
"""
G√©n√©rateur de r√©ponses bot id√©ales avec format professionnel et d√©taill√©
Bas√© sur la structure de r√©ponse id√©ale fournie
"""

import sys
import os
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional

# Ajouter le chemin du projet
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

class IdealBotResponseGenerator:
    """G√©n√©rateur de r√©ponses bot id√©ales avec format professionnel"""
    
    def __init__(self):
        self.escalation_threshold = 12  # Jours l√©gaux
        
    def calculate_days_since_order(self, create_date: str) -> int:
        """Calcule le nombre de jours depuis la commande"""
        try:
            if not create_date:
                return 0
            
            if isinstance(create_date, str):
                if 'T' in create_date:
                    ticket_date = datetime.fromisoformat(create_date.replace('Z', '+00:00'))
                else:
                    ticket_date = datetime.strptime(create_date.split(' ')[0], '%Y-%m-%d')
            else:
                ticket_date = create_date
            
            today = datetime.now()
            delta = today - ticket_date
            return delta.days
            
        except Exception as e:
            print(f"‚ùå Erreur calcul d√©lai: {e}")
            return 0
    
    def determine_order_status(self, days_since_order: int, ticket_data: Dict) -> Dict:
        """D√©termine le statut de la commande bas√© sur les d√©lais"""
        
        if days_since_order > self.escalation_threshold:
            return {
                'status': 'RETARD_CRITIQUE',
                'status_text': 'RETARD CRITIQUE - Escalade imm√©diate',
                'description': 'D√©lai l√©gal d√©pass√©',
                'escalation_needed': True,
                'urgency': 'CRITICAL'
            }
        elif days_since_order > 8:
            return {
                'status': 'RETARD_IMPORTANT',
                'status_text': 'RETARD IMPORTANT',
                'description': 'Retard significatif d√©tect√©',
                'escalation_needed': True,
                'urgency': 'HIGH'
            }
        elif days_since_order > 5:
            return {
                'status': 'EN_COURS_RETARD',
                'status_text': 'EN COURS - Retard mineur',
                'description': 'Production en cours avec l√©ger retard',
                'escalation_needed': False,
                'urgency': 'MEDIUM'
            }
        else:
            return {
                'status': 'EN_COURS_NORMAL',
                'status_text': 'EN COURS - Production',
                'description': 'Production en cours normalement',
                'escalation_needed': False,
                'urgency': 'NORMAL'
            }
    
    def generate_ideal_response(self, ticket: Dict) -> str:
        """G√©n√®re une r√©ponse id√©ale avec format professionnel"""
        
        try:
            # Calculs de base
            create_date = ticket.get('create_date', '')
            days_since_order = self.calculate_days_since_order(create_date)
            
            # Donn√©es client
            customer_name = ticket.get('partner_name', 'Client')
            first_name = customer_name.split()[0] if customer_name and customer_name != 'N/A' else 'Client'
            order_ref = ticket.get('order_ref', '')
            
            # D√©terminer le statut
            order_status = self.determine_order_status(days_since_order, ticket)
            
            # Format de la date
            if create_date:
                try:
                    if isinstance(create_date, str):
                        if 'T' in create_date:
                            order_date = datetime.fromisoformat(create_date.replace('Z', '+00:00'))
                        else:
                            order_date = datetime.strptime(create_date.split(' ')[0], '%Y-%m-%d')
                    else:
                        order_date = create_date
                    
                    formatted_date = order_date.strftime('%d/%m')
                except:
                    formatted_date = create_date.split(' ')[0] if create_date else 'N/A'
            else:
                formatted_date = 'N/A'
            
            # G√©n√©rer la r√©ponse selon le statut
            if order_status['status'] == 'RETARD_CRITIQUE':
                return self._generate_critical_delay_response(first_name, formatted_date, days_since_order, order_ref, order_status)
            elif order_status['status'] == 'RETARD_IMPORTANT':
                return self._generate_important_delay_response(first_name, formatted_date, days_since_order, order_ref, order_status)
            elif order_status['status'] == 'EN_COURS_RETARD':
                return self._generate_minor_delay_response(first_name, formatted_date, days_since_order, order_ref, order_status)
            else:
                return self._generate_normal_response(first_name, formatted_date, days_since_order, order_ref, order_status)
                
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration r√©ponse id√©ale pour ticket {ticket.get('ticket_id')}: {e}")
            return self._generate_fallback_response(first_name)
    
    def _generate_critical_delay_response(self, first_name: str, order_date: str, days_since_order: int, order_ref: str, order_status: Dict) -> str:
        """G√©n√®re une r√©ponse pour retard critique"""
        return f"""Bonjour {first_name}, je suis l'assistant automatique FlowUp.

Je v√©rifie imm√©diatement votre commande du {order_date}.

[Check Odoo automatique]

üö® **ALERTE CRITIQUE D√âTECT√âE**

Votre commande d√©passe le d√©lai l√©gal de {self.escalation_threshold} jours :

üìä **√âtat actuel de votre commande :**
- Date de commande : {order_date}
- Jours √©coul√©s : {days_since_order} jours
- Statut : {order_status['status_text']}
- D√©lai l√©gal : {self.escalation_threshold} jours (d√©pass√© de {days_since_order - self.escalation_threshold} jours)

üö® **Actions imm√©diates en cours :**
- Escalade vers l'√©quipe
- V√©rification urgente de la production
- Un membre de l'√©quipe vous contactera dans les 24h
- Proposition de compensation

‚è±Ô∏è **Prochaines √©tapes :**
- Un membre de l'√©quipe vous contactera dans les 24h
- V√©rification statut production
- Proposition de solution
- Suivi renforc√©

Cette situation est inacceptable et n√©cessite une intervention imm√©diate.

Puis-je vous aider pour autre chose ?"""
    
    def _generate_important_delay_response(self, first_name: str, order_date: str, days_since_order: int, order_ref: str, order_status: Dict) -> str:
        """G√©n√®re une r√©ponse pour retard important"""
        return f"""Bonjour {first_name}, je suis l'assistant automatique FlowUp.

Je v√©rifie imm√©diatement votre commande du {order_date}.

[Check Odoo automatique]

‚ö†Ô∏è **RETARD IMPORTANT D√âTECT√â**

Votre commande pr√©sente un retard significatif :

üìä **√âtat actuel de votre commande :**
- Date de commande : {order_date}
- Jours √©coul√©s : {days_since_order} jours
- Statut : {order_status['status_text']}
- D√©lai l√©gal : {self.escalation_threshold} jours (reste {self.escalation_threshold - days_since_order} jours)

üîß **Que signifie ce retard ?**
Votre commande est en cours de production mais avec un d√©lai plus long que pr√©vu :
- V√©rification des composants
- Tests de qualit√© renforc√©s
- Contr√¥les suppl√©mentaires

‚è±Ô∏è **Actions en cours :**
- Surveillance renforc√©e
- Contact avec la production
- Mise √† jour dans les 24h

Je vous tiens inform√© de l'avancement.

Puis-je vous aider pour autre chose ?"""
    
    def _generate_minor_delay_response(self, first_name: str, order_date: str, days_since_order: int, order_ref: str, order_status: Dict) -> str:
        """G√©n√®re une r√©ponse pour retard mineur"""
        return f"""Bonjour {first_name}, je suis l'assistant automatique FlowUp.

Je v√©rifie imm√©diatement votre commande du {order_date}.

[Check Odoo automatique]

üìã **SUIVI RENFORC√â**

Votre commande est en cours avec un l√©ger retard :

üìä **√âtat actuel de votre commande :**
- Date de commande : {order_date}
- Jours √©coul√©s : {days_since_order} jours
- Statut : {order_status['status_text']}
- D√©lai l√©gal : {self.escalation_threshold} jours (reste {self.escalation_threshold - days_since_order} jours)

üîß **Que signifie "EN COURS" ?**
Votre PC est actuellement en phase de production dans nos ateliers :
- Assemblage des composants
- C√¢blage et configuration
- Tests initiaux

‚è±Ô∏è **Prochaines √©tapes :**
- Test qualit√© (24-48h)
- Pr√©paration exp√©dition
- Livraison estim√©e : dans les 3-5 jours

Le statut sera mis √† jour automatiquement √† chaque √©tape.

Puis-je vous aider pour autre chose ?"""
    
    def _generate_normal_response(self, first_name: str, order_date: str, days_since_order: int, order_ref: str, order_status: Dict) -> str:
        """G√©n√®re une r√©ponse normale"""
        return f"""Bonjour {first_name}, je suis l'assistant automatique FlowUp.

Je v√©rifie imm√©diatement votre commande du {order_date}.

[Check Odoo automatique]

‚úÖ **COMMANDE EN COURS**

Votre commande se d√©roule normalement :

üìä **√âtat actuel de votre commande :**
- Date de commande : {order_date}
- Jours √©coul√©s : {days_since_order} jours
- Statut : {order_status['status_text']}
- D√©lai l√©gal : {self.escalation_threshold} jours (reste {self.escalation_threshold - days_since_order} jours)

üîß **Que signifie "EN COURS" ?**
Votre PC est actuellement en phase de production dans nos ateliers. Cette √©tape comprend :
- Assemblage des composants
- C√¢blage et configuration
- Tests initiaux

‚è±Ô∏è **Prochaines √©tapes :**
- Test qualit√© (24-48h)
- Pr√©paration exp√©dition
- Livraison estim√©e : dans les 3-5 jours

Tout se d√©roule normalement. Le statut sera mis √† jour automatiquement √† chaque √©tape.

Puis-je vous aider pour autre chose ?"""
    
    def _generate_fallback_response(self, first_name: str) -> str:
        """G√©n√®re une r√©ponse de fallback"""
        return f"""Bonjour {first_name}, je suis l'assistant automatique FlowUp.

Je vais examiner votre demande et vous recontacter dans les plus brefs d√©lais.

Cordialement,
L'√©quipe FlowUp Support"""
    
    def process_tickets_with_ideal_responses(self, tickets_file: str) -> List[Dict]:
        """Traite tous les tickets avec des r√©ponses id√©ales"""
        try:
            with open(tickets_file, 'r', encoding='utf-8') as f:
                tickets = json.load(f)
            
            print(f"üì• {len(tickets)} tickets charg√©s")
            
            tickets_with_ideal_responses = []
            
            for i, ticket in enumerate(tickets, 1):
                print(f"ü§ñ G√©n√©ration r√©ponse id√©ale {i}/{len(tickets)} - Ticket {ticket.get('ticket_id')}")
                
                # G√©n√©rer la r√©ponse id√©ale
                ideal_response = self.generate_ideal_response(ticket)
                
                # Ajouter la r√©ponse au ticket
                ticket_with_ideal = ticket.copy()
                ticket_with_ideal['bot_response_ideal'] = ideal_response
                ticket_with_ideal['response_generated_at'] = datetime.now().isoformat()
                
                tickets_with_ideal_responses.append(ticket_with_ideal)
            
            return tickets_with_ideal_responses
            
        except Exception as e:
            print(f"‚ùå Erreur traitement tickets: {e}")
            return []

def main():
    """Fonction principale"""
    print("ü§ñ G√âN√âRATION R√âPONSES BOT ID√âALES")
    print("=" * 60)
    
    # Fichier des tickets
    tickets_file = "/Users/r4v3n/Workspce/Prod/kikoo_rag/flowup-support-bot/data/uc336_postgres_tickets.json"
    
    if not os.path.exists(tickets_file):
        print(f"‚ùå Fichier tickets non trouv√©: {tickets_file}")
        return
    
    # Initialiser le g√©n√©rateur
    generator = IdealBotResponseGenerator()
    
    # Traiter les tickets
    print("üì• Chargement des tickets...")
    tickets_with_ideal_responses = generator.process_tickets_with_ideal_responses(tickets_file)
    
    if not tickets_with_ideal_responses:
        print("‚ùå Aucun ticket trait√©")
        return
    
    # Sauvegarder les r√©sultats
    output_file = "/Users/r4v3n/Workspce/Prod/kikoo_rag/flowup-support-bot/data/uc336_tickets_ideal_responses.json"
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(tickets_with_ideal_responses, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Tickets avec r√©ponses id√©ales sauvegard√©s: {output_file}")
        
        # R√©sum√©
        print(f"\nüìä R√âSUM√â")
        print("=" * 30)
        print(f"‚úÖ Tickets trait√©s: {len(tickets_with_ideal_responses)}")
        print(f"ü§ñ R√©ponses id√©ales g√©n√©r√©es: {len(tickets_with_ideal_responses)}")
        print(f"üíæ Fichier: {output_file}")
        
        # Afficher quelques exemples
        print(f"\nüìã EXEMPLES DE R√âPONSES ID√âALES")
        print("=" * 50)
        
        for i, ticket in enumerate(tickets_with_ideal_responses[:2], 1):
            print(f"\n{i}. Ticket {ticket['ticket_id']} - {ticket.get('partner_name', 'N/A')}")
            print(f"   Message client: {ticket['first_customer_message'][:60]}...")
            print(f"   R√©ponse id√©ale: {ticket['bot_response_ideal'][:100]}...")
    
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde: {e}")

if __name__ == "__main__":
    main()
