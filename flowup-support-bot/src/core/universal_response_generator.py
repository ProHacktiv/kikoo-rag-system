"""
G√©n√©rateur de r√©ponses unifi√© bas√© sur les UC et templates.
Optimis√© pour les 50 tickets FlowUp analys√©s.
"""

from typing import Dict, Optional, List
from datetime import datetime, timedelta
import yaml
import json

class UniversalResponseGenerator:
    """G√©n√©rateur de r√©ponses bas√© sur les UC et templates"""
    
    def __init__(self, odoo_client=None, config_path="config"):
        self.odoo = odoo_client
        self.config_path = config_path
        self.templates = self._load_templates()
        self.uc_solutions = self._load_uc_solutions()
    
    def _load_templates(self) -> Dict:
        """Charge tous les templates de r√©ponse"""
        return {
            "greeting": "Bonjour, je suis l'assistant automatique FlowUp.",
            
            # DELIVERY Templates
            "delivery_estimation": """
J'ai trouv√© votre commande {order_ref} du {order_date}.

‚úÖ **Votre commande est dans les d√©lais l√©gaux**
‚Ä¢ Command√©e il y a : {days_elapsed} jours
‚Ä¢ D√©lai maximum : 12 jours ouvr√©s
‚Ä¢ Jours restants : {remaining_days} jours
‚Ä¢ Statut actuel : {status}

{tracking_info}

Puis-je vous aider pour autre chose ?
""",
            
            "delivery_delayed": """
‚ö†Ô∏è **Je constate un d√©passement du d√©lai l√©gal** ({days_elapsed} jours).

Je transf√®re imm√©diatement votre demande √† un op√©rateur pour un traitement prioritaire.

Un membre de notre √©quipe vous contactera dans les plus brefs d√©lais.
""",
            
            "incomplete_delivery": """
Je comprends que votre livraison est incompl√®te.

üì¶ **√âl√©ments command√©s :**
{order_items}

‚ö†Ô∏è **√âl√©ments manquants d√©tect√©s.**

Je transf√®re votre r√©clamation au service logistique avec priorit√© √âLEV√âE.
Un op√©rateur vous contactera dans les 2 heures.

Je vous pr√©sente nos excuses pour cette erreur.
""",
            
            "tracking_provided": """
üì¶ **Votre commande est exp√©di√©e !**
‚Ä¢ Transporteur : {carrier}
‚Ä¢ Num√©ro de suivi : {tracking_number}
‚Ä¢ [Suivre mon colis]({tracking_url})

Vous devriez recevoir votre colis sous 24-48h.
""",
            
            # HARDWARE Templates  
            "hardware_diagnostic": """
Je comprends que vous rencontrez un probl√®me technique avec {component}.

üîß **Solutions √† essayer :**
{solutions}

Si le probl√®me persiste apr√®s ces v√©rifications, je peux transf√©rer votre demande √† un technicien.

Ces solutions ont-elles r√©solu votre probl√®me ?
""",
            
            "hardware_escalation": """
Je vois que le probl√®me persiste malgr√© les solutions propos√©es.

Je transf√®re imm√©diatement votre demande √† un technicien sp√©cialis√© qui pourra vous aider plus efficacement.

Un technicien vous contactera dans les plus brefs d√©lais.
""",
            
            # SALES Templates
            "refund_request": """
Je comprends votre demande de {request_type}.

En tant qu'assistant automatique, je ne peux pas traiter directement les demandes de remboursement ou d'√©change.

Je transf√®re imm√©diatement votre demande √† un op√©rateur sp√©cialis√© avec priorit√© √âLEV√âE.

Un membre de notre √©quipe vous contactera dans les plus brefs d√©lais.
""",
            
            "pre_order_inquiry": """
Je comprends votre question concernant {inquiry_type}.

{response_content}

Un conseiller commercial vous contactera pour plus de d√©tails.
""",
            
            # GENERIC
            "escalation": """
Je transf√®re votre demande √† un op√©rateur qui pourra mieux vous aider.

Raison : {reason}
Priorit√© : {priority}

Vous serez contact√© dans les plus brefs d√©lais.
""",
            
            "unknown": """
Je vais vous aider au mieux.

Pourriez-vous me pr√©ciser votre demande concernant :
- Une livraison ou commande ?
- Un probl√®me technique ?
- Une question commerciale ?

Cela me permettra de mieux vous orienter.
""",
            
            "closing": """
Puis-je vous aider pour autre chose ?
"""
        }
    
    def _load_uc_solutions(self) -> Dict:
        """Charge les solutions par UC"""
        return {
            # HARDWARE Solutions
            263: {
                "component": "votre carte graphique",
                "solutions": """1. V√©rifier les c√¢bles d'alimentation de la carte graphique
2. Mettre √† jour les pilotes graphiques
3. V√©rifier les temp√©ratures avec HWMonitor
4. Tester avec une autre sortie vid√©o
5. V√©rifier que la carte est bien enfich√©e"""
            },
            267: {
                "component": "l'alimentation",
                "solutions": """1. V√©rifier tous les c√¢bles d'alimentation
2. Tester avec une autre prise √©lectrique
3. Maintenir le bouton power 30 secondes (PC d√©branch√©)
4. V√©rifier que l'interrupteur de l'alimentation est sur ON
5. Tester avec une autre alimentation si possible"""
            },
            269: {
                "component": "le syst√®me de refroidissement",
                "solutions": """1. Nettoyer les filtres √† poussi√®re
2. V√©rifier que les ventilateurs tournent
3. Appliquer un profil de ventilation plus agressif
4. V√©rifier la p√¢te thermique du processeur
5. V√©rifier l'orientation des ventilateurs"""
            },
            270: {
                "component": "les p√©riph√©riques",
                "solutions": """1. V√©rifier les connexions USB
2. Tester sur un autre port USB
3. Red√©marrer le PC
4. V√©rifier les pilotes des p√©riph√©riques
5. Tester avec un autre p√©riph√©rique"""
            },
            284: {
                "component": "l'√©cran",
                "solutions": """1. V√©rifier les c√¢bles de connexion
2. Tester avec un autre c√¢ble
3. V√©rifier la source d'alimentation de l'√©cran
4. Tester avec un autre √©cran
5. V√©rifier les param√®tres d'affichage"""
            },
            
            # SOFTWARE Solutions
            277: {
                "component": "la connexion r√©seau",
                "solutions": """1. Red√©marrer le routeur/modem
2. V√©rifier les c√¢bles r√©seau
3. Tester la connexion WiFi
4. V√©rifier les param√®tres r√©seau
5. Contacter votre FAI si n√©cessaire"""
            },
            272: {
                "component": "le syst√®me d'exploitation",
                "solutions": """1. Red√©marrer en mode sans √©chec
2. V√©rifier les mises √† jour Windows
3. Ex√©cuter une v√©rification des fichiers syst√®me
4. V√©rifier l'espace disque disponible
5. Restaurer le syst√®me √† une date ant√©rieure"""
            }
        }
    
    def generate(self, intent_result, ticket_data: Dict) -> str:
        """G√©n√®re la r√©ponse compl√®te bas√©e sur l'analyse"""
        
        response_parts = []
        
        # 1. Toujours commencer par le greeting
        response_parts.append(self.templates["greeting"])
        
        # 2. Check Odoo si n√©cessaire
        order_data = None
        if self._needs_odoo_check(intent_result):
            order_data = self._get_order_data(ticket_data.get("user_id"))
        
        # 3. G√©n√©rer le corps selon l'UC
        body = self._generate_body_for_uc(intent_result, ticket_data, order_data)
        response_parts.append(body)
        
        # 4. Ajouter escalade si n√©cessaire
        if intent_result.requires_escalation:
            escalation = self.templates["escalation"].format(
                reason=intent_result.escalation_reason,
                priority=intent_result.priority.value
            )
            response_parts.append(escalation)
        
        # 5. Toujours finir par la question de cl√¥ture
        response_parts.append(self.templates["closing"])
        
        return "\n\n".join(response_parts)
    
    def _needs_odoo_check(self, intent) -> bool:
        """D√©termine si on doit checker Odoo"""
        odoo_categories = ["DELIVERY", "SALES"]
        odoo_ucs = [421, 337, 426, 336, 365]
        
        return (intent.category.value in odoo_categories or 
                intent.uc_id in odoo_ucs)
    
    def _get_order_data(self, user_id: str) -> Optional[Dict]:
        """R√©cup√®re les donn√©es de commande depuis Odoo"""
        if not self.odoo:
            # Mock data pour test
            return {
                "order_ref": "CMD-2024-001",
                "order_date": datetime.now() - timedelta(days=7),
                "status": "EN PRODUCTION",
                "items": ["PC Gamer RTX 4060", "√âcran 27 pouces"],
                "tracking": None
            }
        
        return self.odoo.get_order(user_id)
    
    def _generate_body_for_uc(self, intent, ticket: Dict, order: Dict) -> str:
        """G√©n√®re le corps de message selon l'UC d√©tect√©"""
        
        # UC 337 - Estimation livraison
        if intent.uc_id == 337:
            if order:
                days = (datetime.now() - order["order_date"]).days
                remaining = 12 - days
                
                if remaining > 0:
                    return self.templates["delivery_estimation"].format(
                        order_ref=order["order_ref"],
                        order_date=order["order_date"].strftime("%d/%m/%Y"),
                        days_elapsed=days,
                        remaining_days=remaining,
                        status=order["status"],
                        tracking_info=self._format_tracking(order.get("tracking"))
                    )
                else:
                    return self.templates["delivery_delayed"].format(
                        days_elapsed=days
                    )
        
        # UC 306 - Remboursement
        elif intent.uc_id == 306:
            return self.templates["refund_request"].format(
                request_type="remboursement"
            )
        
        # UC 426 - Livraison incompl√®te
        elif intent.uc_id == 426:
            if order:
                items_list = "\n".join([f"‚Ä¢ {item}" for item in order["items"]])
                return self.templates["incomplete_delivery"].format(
                    order_items=items_list
                )
        
        # UC Hardware (263, 267, 269, 270, 284)
        elif intent.category.value == "HARDWARE":
            solutions = self._get_hardware_solutions(intent.uc_id)
            return self.templates["hardware_diagnostic"].format(
                component=solutions["component"],
                solutions=solutions["solutions"]
            )
        
        # UC Software (277, 272)
        elif intent.category.value == "SOFTWARE":
            solutions = self._get_software_solutions(intent.uc_id)
            return self.templates["hardware_diagnostic"].format(
                component=solutions["component"],
                solutions=solutions["solutions"]
            )
        
        # UC 336 - Pr√©commande
        elif intent.uc_id == 336:
            return self.templates["pre_order_inquiry"].format(
                inquiry_type="la disponibilit√©",
                response_content="Je vais v√©rifier la disponibilit√© de ce produit et vous recontacter."
            )
        
        # Fallback
        return self.templates["unknown"]
    
    def _format_tracking(self, tracking: Optional[Dict]) -> str:
        """Formate les infos de tracking"""
        if not tracking:
            return ""
        
        return self.templates["tracking_provided"].format(
            carrier=tracking.get('carrier', 'UPS'),
            tracking_number=tracking.get('number', ''),
            tracking_url=tracking.get('url', '')
        )
    
    def _get_hardware_solutions(self, uc_id: int) -> Dict:
        """Retourne les solutions pour probl√®mes hardware"""
        return self.uc_solutions.get(uc_id, {
            "component": "votre mat√©riel",
            "solutions": "1. Red√©marrer le PC\n2. V√©rifier les connexions\n3. Contacter le support technique"
        })
    
    def _get_software_solutions(self, uc_id: int) -> Dict:
        """Retourne les solutions pour probl√®mes software"""
        return self.uc_solutions.get(uc_id, {
            "component": "le syst√®me",
            "solutions": "1. Red√©marrer le PC\n2. V√©rifier les mises √† jour\n3. Contacter le support technique"
        })
    
    def generate_escalation_response(self, reason: str, priority: str) -> str:
        """G√©n√®re une r√©ponse d'escalade standardis√©e"""
        return self.templates["escalation"].format(
            reason=reason,
            priority=priority
        )
    
    def get_response_stats(self, responses: List[Dict]) -> Dict:
        """Calcule les statistiques des r√©ponses g√©n√©r√©es"""
        stats = {
            "total_responses": len(responses),
            "by_category": {},
            "escalation_rate": 0,
            "avg_length": 0
        }
        
        total_length = 0
        escalated = 0
        
        for response in responses:
            category = response.get("category", "UNKNOWN")
            if category not in stats["by_category"]:
                stats["by_category"][category] = 0
            stats["by_category"][category] += 1
            
            if response.get("escalated", False):
                escalated += 1
            
            total_length += len(response.get("content", ""))
        
        stats["escalation_rate"] = escalated / len(responses) if responses else 0
        stats["avg_length"] = total_length / len(responses) if responses else 0
        
        return stats
