"""
D√©tecteur UC_263 CORRIG√â - Probl√®mes carte graphique
Version am√©lior√©e bas√©e sur l'analyse des probl√®mes actuels
"""

import re
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta

class UC263DetectorFixed:
    """
    D√©tecteur UC_263 CORRIG√â avec logique am√©lior√©e
    
    PROBL√àMES R√âSOLUS:
    - Faux positifs sur simple mention "carte graphique"
    - Distinction entre question commerciale et probl√®me technique
    - V√©rification de possession du PC
    - Analyse des sympt√¥mes r√©els
    """
    
    def __init__(self):
        # SYMPT√îMES TECHNIQUES R√âELS (pas juste mention du composant)
        self.technical_symptoms = [
            # Probl√®mes d'affichage
            "ne s'allume plus", "ne d√©marre pas", "√©cran noir", "√©cran bleu",
            "pas d'image", "pas de signal", "√©cran vide",
            
            # Probl√®mes de performance
            "crash", "freeze", "se fige", "s'√©teint", "red√©marre",
            "lent", "lag", "saccad√©", "instable",
            
            # Probl√®mes visuels
            "artefacts", "lignes", "pixels", "couleurs bizarres",
            "√©cran d√©form√©", "r√©solution", "affichage bizarre",
            
            # Probl√®mes thermiques
            "surchauffe", "chauffe", "temp√©rature", "ventilateur",
            "bruit", "ventilo", "hot", "br√ªlant",
            
            # Probl√®mes drivers
            "driver", "pilote", "installation", "reconnaissance",
            "d√©tection", "non reconnu", "erreur driver",
            
            # Probl√®mes mat√©riels
            "d√©faillant", "d√©fectueux", "ne fonctionne plus",
            "cass√©", "mort", "plus de vie"
        ]
        
        # MOTS-CL√âS COMMERCIAUX (ne pas d√©tecter comme UC_263)
        self.commercial_keywords = [
            "prix", "co√ªt", "tarif", "combien", "budget",
            "disponible", "stock", "livraison", "d√©lai",
            "compatible", "recommandation", "conseil",
            "comparaison", "diff√©rence", "meilleur",
            "upgrade", "am√©lioration", "√©volution"
        ]
        
        # V√âRIFICATEURS DE POSSESSION
        self.ownership_indicators = [
            "mon pc", "mon ordinateur", "j'ai", "j'ai achet√©",
            "j'ai command√©", "depuis que j'ai", "depuis l'achat",
            "depuis la livraison", "depuis que je l'ai re√ßu"
        ]
        
        # SEUILS DE CONFIANCE
        self.confidence_thresholds = {
            "high": 0.8,      # Sympt√¥mes clairs + possession
            "medium": 0.6,    # Sympt√¥mes + contexte
            "low": 0.4,       # Mention vague
            "reject": 0.3     # Probablement commercial
        }
    
    def detect(self, message: str, context: Dict = None) -> Dict:
        """
        D√©tection UC_263 am√©lior√©e avec logique multi-crit√®res
        
        Args:
            message: Message du client
            context: Contexte de la commande (status, produits, etc.)
            
        Returns:
            Dict avec is_uc_263, confidence, reasons, should_escalate
        """
        message_lower = message.lower()
        
        # √âTAPE 1: V√©rifier si c'est une question commerciale
        if self._is_commercial_inquiry(message_lower):
            return {
                "is_uc_263": False,
                "confidence": 0.0,
                "reason": "Question commerciale d√©tect√©e",
                "should_escalate": False,
                "category": "COMMERCIAL"
            }
        
        # √âTAPE 2: D√©tecter les sympt√¥mes techniques
        symptoms_found = self._detect_technical_symptoms(message_lower)
        
        # √âTAPE 3: V√©rifier la possession du PC
        has_pc = self._check_pc_ownership(message_lower, context)
        
        # √âTAPE 4: Calculer le score de confiance
        confidence, reasons = self._calculate_confidence(
            symptoms_found, has_pc, message_lower, context
        )
        
        # √âTAPE 5: D√©cision finale
        is_uc_263 = confidence >= self.confidence_thresholds["medium"]
        should_escalate = confidence >= self.confidence_thresholds["high"]
        
        return {
            "is_uc_263": is_uc_263,
            "confidence": confidence,
            "reason": " | ".join(reasons),
            "should_escalate": should_escalate,
            "symptoms_found": symptoms_found,
            "has_pc": has_pc,
            "category": "TECHNICAL" if is_uc_263 else "COMMERCIAL"
        }
    
    def _is_commercial_inquiry(self, message: str) -> bool:
        """V√©rifie si c'est une question commerciale (pas technique)"""
        commercial_score = 0
        
        for keyword in self.commercial_keywords:
            if keyword in message:
                commercial_score += 1
        
        # Si plus de 2 mots commerciaux, probablement commercial
        return commercial_score >= 2
    
    def _detect_technical_symptoms(self, message: str) -> List[str]:
        """D√©tecte les sympt√¥mes techniques r√©els"""
        found_symptoms = []
        
        for symptom in self.technical_symptoms:
            if symptom in message:
                found_symptoms.append(symptom)
        
        return found_symptoms
    
    def _check_pc_ownership(self, message: str, context: Dict = None) -> bool:
        """V√©rifie si le client poss√®de d√©j√† le PC"""
        
        # V√©rification par mots-cl√©s dans le message
        ownership_indicators = any(indicator in message for indicator in self.ownership_indicators)
        
        # V√©rification par contexte Odoo
        context_ownership = False
        if context:
            order_status = context.get('status', '').lower()
            if order_status in ['delivered', 'in_use', 'shipped']:
                context_ownership = True
        
        return ownership_indicators or context_ownership
    
    def _calculate_confidence(self, symptoms: List[str], has_pc: bool, 
                            message: str, context: Dict = None) -> Tuple[float, List[str]]:
        """Calcule le score de confiance multi-crit√®res"""
        score = 0.0
        reasons = []
        
        # Base score
        base_score = 0.1
        score += base_score
        reasons.append("Base score")
        
        # Sympt√¥mes techniques (poids fort)
        if symptoms:
            symptom_score = min(len(symptoms) * 0.3, 0.6)  # Max 0.6
            score += symptom_score
            reasons.append(f"Sympt√¥mes: {len(symptoms)}")
        
        # Possession du PC (poids fort)
        if has_pc:
            ownership_score = 0.3
            score += ownership_score
            reasons.append("Possession PC confirm√©e")
        
        # Contexte de commande r√©cente
        if context and context.get('days_since_order', 0) < 30:
            recent_score = 0.1
            score += recent_score
            reasons.append("Commande r√©cente")
        
        # Mots-cl√©s techniques sp√©cifiques
        technical_keywords = ['gpu', 'carte graphique', 'graphics', 'rtx', 'gtx']
        tech_mentions = sum(1 for kw in technical_keywords if kw in message)
        if tech_mentions > 0:
            tech_score = min(tech_mentions * 0.1, 0.2)  # Max 0.2
            score += tech_score
            reasons.append(f"Mentions techniques: {tech_mentions}")
        
        # P√©nalit√© si trop de mots commerciaux
        commercial_penalty = 0
        for keyword in self.commercial_keywords:
            if keyword in message:
                commercial_penalty += 0.1
        
        score -= commercial_penalty
        if commercial_penalty > 0:
            reasons.append(f"P√©nalit√© commerciale: -{commercial_penalty:.1f}")
        
        # Normaliser entre 0 et 1
        confidence = max(0.0, min(1.0, score))
        
        return confidence, reasons
    
    def get_detection_summary(self, message: str, context: Dict = None) -> str:
        """Retourne un r√©sum√© de la d√©tection pour debug"""
        result = self.detect(message, context)
        
        summary = f"""
üîç ANALYSE UC_263 D√âTECTEUR CORRIG√â
====================================

Message: "{message[:100]}..."

R√âSULTAT:
- UC_263 d√©tect√©: {'‚úÖ OUI' if result['is_uc_263'] else '‚ùå NON'}
- Confiance: {result['confidence']:.1%}
- Cat√©gorie: {result['category']}
- Escalade: {'üö® OUI' if result['should_escalate'] else '‚ùå NON'}

D√âTAILS:
- Sympt√¥mes trouv√©s: {len(result['symptoms_found'])} ({result['symptoms_found']})
- Possession PC: {'‚úÖ OUI' if result['has_pc'] else '‚ùå NON'}
- Raisons: {result['reason']}

SEUILS:
- Seuil minimum: {self.confidence_thresholds['medium']:.1%}
- Seuil escalade: {self.confidence_thresholds['high']:.1%}
        """
        
        return summary.strip()

# Tests de validation
def test_uc263_detector():
    """Tests pour valider le d√©tecteur UC_263 corrig√©"""
    
    detector = UC263DetectorFixed()
    
    # Tests POSITIFS (vrais probl√®mes techniques)
    positive_cases = [
        "Mon PC ne s'allume plus depuis hier, la carte graphique fait du bruit",
        "J'ai des artefacts sur l'√©cran, ma RTX 3080 crash",
        "Depuis que j'ai re√ßu mon PC, la carte graphique surchauffe",
        "Ma carte graphique ne fonctionne plus, √©cran noir au d√©marrage"
    ]
    
    # Tests N√âGATIFS (questions commerciales)
    negative_cases = [
        "Quel est le prix de la carte graphique RTX 4080 ?",
        "Quelle carte graphique recommandez-vous pour du gaming ?",
        "La RTX 4070 est-elle disponible en stock ?",
        "Quelle est la diff√©rence entre RTX 4060 et RTX 4070 ?"
    ]
    
    print("üß™ TESTS D√âTECTEUR UC_263 CORRIG√â")
    print("=" * 50)
    
    print("\n‚úÖ CAS POSITIFS (probl√®mes techniques):")
    for i, case in enumerate(positive_cases, 1):
        result = detector.detect(case)
        status = "‚úÖ D√âTECT√â" if result['is_uc_263'] else "‚ùå MANQU√â"
        print(f"{i}. {status} - {case[:50]}...")
        print(f"   Confiance: {result['confidence']:.1%}")
    
    print("\n‚ùå CAS N√âGATIFS (questions commerciales):")
    for i, case in enumerate(negative_cases, 1):
        result = detector.detect(case)
        status = "‚úÖ REJET√â" if not result['is_uc_263'] else "‚ùå FAUX POSITIF"
        print(f"{i}. {status} - {case[:50]}...")
        print(f"   Confiance: {result['confidence']:.1%}")
    
    # Test avec contexte
    print("\nüîç TEST AVEC CONTEXTE:")
    context = {
        'status': 'delivered',
        'days_since_order': 5,
        'products': ['RTX 4080']
    }
    
    test_message = "Ma carte graphique ne s'allume plus"
    result = detector.detect(test_message, context)
    print(f"Message: {test_message}")
    print(f"R√©sultat: {'‚úÖ D√âTECT√â' if result['is_uc_263'] else '‚ùå MANQU√â'}")
    print(f"Confiance: {result['confidence']:.1%}")
    print(f"Escalade: {'üö® OUI' if result['should_escalate'] else '‚ùå NON'}")

if __name__ == "__main__":
    test_uc263_detector()
