"""
Point d'entr√©e principal de l'application FlowUp Support Bot.
API FastAPI avec endpoints pour le traitement des tickets.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Dict, List, Optional
import logging
import yaml
import os
from datetime import datetime

from .core.universal_ticket_processor import UniversalTicketProcessor
from .core.universal_intent_analyzer import UniversalIntentAnalyzer
from .integrations.odoo_client import OdooClient
from .integrations.ups_tracker import UPSTracker
from .utils.logger import setup_logging

# Configuration du logging
setup_logging("INFO")
logger = logging.getLogger(__name__)

# Initialisation de l'application FastAPI
app = FastAPI(
    title="FlowUp Support Bot API",
    description="API pour le syst√®me de support client automatis√© FlowUp",
    version="2.0.0"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®les Pydantic
class TicketRequest(BaseModel):
    id: str
    message: str
    user_id: str
    category_expected: Optional[str] = None
    uc_expected: Optional[int] = None
    context: Optional[Dict] = None
    date: Optional[str] = None

class TicketResponse(BaseModel):
    ticket_id: str
    detected_category: str
    detected_uc: int
    confidence: float
    response: str
    escalate: bool
    escalation_reason: Optional[str] = None
    priority: str
    actions_taken: List[str]
    performance: Dict
    processing_time: float

class BatchRequest(BaseModel):
    tickets: List[TicketRequest]

class StatsResponse(BaseModel):
    total_processed: int
    category_accuracy: float
    uc_accuracy: float
    escalation_rate: float
    by_category: Dict[str, int]
    by_priority: Dict[str, int]

# Variables globales
processor: Optional[UniversalTicketProcessor] = None
odoo_client: Optional[OdooClient] = None
ups_tracker: Optional[UPSTracker] = None

@app.on_event("startup")
async def startup_event():
    """Initialisation de l'application au d√©marrage"""
    global processor, odoo_client, ups_tracker
    
    logger.info("üöÄ D√©marrage de FlowUp Support Bot...")
    
    try:
        # Charger la configuration
        config_path = "config/chatbot_config.yaml"
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
        else:
            config = {}
        
        # Initialiser les clients d'int√©gration
        odoo_client = OdooClient(
            api_url=os.getenv("ODOO_URL", "http://localhost:8069/api"),
            api_key=os.getenv("ODOO_API_KEY", "mock_key")
        )
        
        ups_tracker = UPSTracker(
            api_key=os.getenv("UPS_API_KEY", "mock_key")
        )
        
        # Initialiser le processeur principal
        processor = UniversalTicketProcessor(config, odoo_client)
        
        logger.info("‚úÖ Initialisation termin√©e avec succ√®s")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation: {e}")
        raise

@app.get("/")
async def root():
    """Endpoint racine"""
    return {
        "message": "FlowUp Support Bot API",
        "version": "2.0.0",
        "status": "running",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """V√©rification de l'√©tat de sant√© de l'API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "components": {
            "processor": processor is not None,
            "odoo": odoo_client is not None,
            "ups": ups_tracker is not None
        }
    }

@app.post("/process", response_model=TicketResponse)
async def process_ticket(ticket: TicketRequest):
    """
    Traite un ticket unique
    
    Args:
        ticket: Donn√©es du ticket √† traiter
        
    Returns:
        R√©ponse g√©n√©r√©e par le bot
    """
    if not processor:
        raise HTTPException(status_code=500, detail="Processeur non initialis√©")
    
    try:
        # Convertir le ticket en dictionnaire
        ticket_dict = ticket.dict()
        
        # Traiter le ticket
        result = processor.process(ticket_dict)
        
        # Convertir en r√©ponse
        response = TicketResponse(**result)
        
        logger.info(f"Ticket {ticket.id} trait√© avec succ√®s")
        return response
        
    except Exception as e:
        logger.error(f"Erreur lors du traitement du ticket {ticket.id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/process/batch")
async def process_batch(request: BatchRequest):
    """
    Traite un batch de tickets
    
    Args:
        request: Liste des tickets √† traiter
        
    Returns:
        Liste des r√©ponses g√©n√©r√©es
    """
    if not processor:
        raise HTTPException(status_code=500, detail="Processeur non initialis√©")
    
    try:
        # Convertir les tickets en dictionnaires
        tickets = [ticket.dict() for ticket in request.tickets]
        
        # Traiter le batch
        results = processor.process_batch(tickets)
        
        logger.info(f"Batch de {len(tickets)} tickets trait√© avec succ√®s")
        return {
            "results": results,
            "total_processed": len(results),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Erreur lors du traitement du batch: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/stats", response_model=StatsResponse)
async def get_statistics():
    """
    R√©cup√®re les statistiques de performance du bot
    
    Returns:
        Statistiques d√©taill√©es
    """
    if not processor:
        raise HTTPException(status_code=500, detail="Processeur non initialis√©")
    
    try:
        stats = processor.get_stats()
        return StatsResponse(**stats)
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des stats: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/stats/detailed")
async def get_detailed_stats():
    """
    R√©cup√®re un rapport de performance d√©taill√©
    
    Returns:
        Rapport complet avec recommandations
    """
    if not processor:
        raise HTTPException(status_code=500, detail="Processeur non initialis√©")
    
    try:
        report = processor.get_performance_report()
        return report
        
    except Exception as e:
        logger.error(f"Erreur lors de la g√©n√©ration du rapport: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/analyze")
async def analyze_message(message: str):
    """
    Analyse un message sans g√©n√©rer de r√©ponse compl√®te
    
    Args:
        message: Message √† analyser
        
    Returns:
        R√©sultat de l'analyse d'intent
    """
    if not processor:
        raise HTTPException(status_code=500, detail="Processeur non initialis√©")
    
    try:
        # Utiliser l'analyseur d'intent directement
        intent_result = processor.intent_analyzer.analyze(message)
        
        return {
            "category": intent_result.category.value,
            "uc_id": intent_result.uc_id,
            "confidence": intent_result.confidence,
            "priority": intent_result.priority.value,
            "keywords_matched": intent_result.keywords_matched,
            "requires_escalation": intent_result.requires_escalation,
            "escalation_reason": intent_result.escalation_reason
        }
        
    except Exception as e:
        logger.error(f"Erreur lors de l'analyse du message: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/reset")
async def reset_statistics():
    """
    Remet √† z√©ro les statistiques du bot
    
    Returns:
        Confirmation de la r√©initialisation
    """
    if not processor:
        raise HTTPException(status_code=500, detail="Processeur non initialis√©")
    
    try:
        processor.reset_stats()
        return {
            "message": "Statistiques r√©initialis√©es avec succ√®s",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©initialisation: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/config")
async def get_configuration():
    """
    R√©cup√®re la configuration actuelle du bot
    
    Returns:
        Configuration compl√®te
    """
    try:
        config_path = "config/chatbot_config.yaml"
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            return config
        else:
            return {"error": "Fichier de configuration non trouv√©"}
            
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration de la config: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Endpoints de test
@app.get("/test/50-tickets")
async def test_50_tickets():
    """
    Lance le test des 50 tickets (endpoint de test)
    
    Returns:
        R√©sultats du test
    """
    try:
        # Importer et ex√©cuter le script de test
        import sys
        import os
        sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'scripts'))
        
        from test_50_tickets import test_all_tickets
        
        results, stats = test_all_tickets()
        
        return {
            "message": "Test des 50 tickets termin√©",
            "results": results,
            "statistics": stats,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Erreur lors du test: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
