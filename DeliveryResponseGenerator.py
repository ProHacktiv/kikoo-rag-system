class DeliveryResponseGenerator:
    """G√©n√®re des r√©ponses appropri√©es pour les tickets livraison"""
    
    def __init__(self, odoo: OdooIntegration):
        self.odoo = odoo
        
    def generate_response(self, 
                         user_id: str, 
                         intent: str, 
                         context: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√©n√®re une r√©ponse compl√®te avec actions
        """
        # R√©cup√©rer les commandes de l'utilisateur
        orders = self.odoo.get_recent_orders(user_id)
        
        response = {
            'greeting': "Bonjour, je suis l'assistant automatique FlowUp.",
            'body': "",
            'actions': [],
            'escalate': False,
            'escalation_reason': None
        }
        
        if not orders:
            response['body'] = "Je ne trouve aucune commande r√©cente sur votre compte."
            response['escalate'] = True
            response['escalation_reason'] = "Aucune commande trouv√©e"
            return response
        
        # Prendre la commande la plus r√©cente
        order = orders[0]
        
        # G√©n√©rer la r√©ponse selon l'intention
        if intent == 'DELIVERY_ESTIMATION':
            response = self._handle_estimation(order, response, context)
        elif intent == 'ORDER_STATUS':
            response = self._handle_status(order, response, context)
        elif intent == 'DELIVERY_PROBLEM':
            response = self._handle_problem(order, response, context)
        elif intent == 'ADDRESS_CHANGE':
            response = self._handle_address_change(order, response, context)
        else:
            response = self._handle_unknown(order, response, context)
            
        return response
    
    def _handle_estimation(self, order: Order, response: Dict, context: Dict) -> Dict:
        """G√®re les demandes d'estimation de livraison"""
        
        response['actions'].append('check_order_delay')
        
        if len([order]) > 1:
            response['body'] = f"J'ai trouv√© plusieurs commandes sur votre compte. "
            response['body'] += f"Je vais v√©rifier la plus r√©cente du {order.order_date.strftime('%d/%m/%Y')}.\n\n"
        else:
            response['body'] = f"J'ai trouv√© votre commande {order.order_id} du {order.order_date.strftime('%d/%m/%Y')}.\n\n"
        
        if order.is_within_legal_delay:
            days_elapsed = order.days_since_payment
            remaining = order.remaining_days
            
            response['body'] += f"‚úÖ **Votre commande est dans les d√©lais l√©gaux.**\n\n"
            response['body'] += f"‚Ä¢ Command√©e il y a : {days_elapsed} jours\n"
            response['body'] += f"‚Ä¢ D√©lai maximum : 12 jours ouvr√©s\n"
            response['body'] += f"‚Ä¢ Jours restants : {remaining} jours\n"
            response['body'] += f"‚Ä¢ Statut actuel : {order.status.value}\n\n"
            
            # Ajouter info tracking si exp√©di√©
            if order.status == OrderStatus.SHIPPED and order.tracking_url:
                response['body'] += f"üì¶ **Bonne nouvelle !** Votre commande est exp√©di√©e.\n"
                response['body'] += f"‚Ä¢ Num√©ro de suivi : {order.tracking_number}\n"
                response['body'] += f"‚Ä¢ [Suivre mon colis UPS]({order.tracking_url})\n\n"
                response['actions'].append('provide_tracking')
            
            response['body'] += "Si votre commande n'arrive pas dans les d√©lais, "
            response['body'] += "n'h√©sitez pas √† nous recontacter."
            
        else:
            # D√©lai d√©pass√© - escalade imm√©diate
            response['body'] += f"‚ö†Ô∏è **Je constate un d√©passement du d√©lai l√©gal** "
            response['body'] += f"({order.days_since_payment} jours).\n\n"
            response['body'] += "Je transf√®re imm√©diatement votre demande √† un op√©rateur "
            response['body'] += "pour un traitement prioritaire."
            response['escalate'] = True
            response['escalation_reason'] = f"D√©lai d√©pass√©: {order.days_since_payment} jours"
            response['actions'].append('escalate_priority')
            
        response['body'] += "\n\nPuis-je vous aider pour autre chose ?"
        return response
    
    def _handle_status(self, order: Order, response: Dict, context: Dict) -> Dict:
        """G√®re les demandes de statut de commande"""
        
        response['actions'].append('check_order_status')
        response['body'] = f"Voici le statut de votre commande {order.order_id}:\n\n"
        
        # Ic√¥nes par statut
        status_icons = {
            OrderStatus.PENDING: "‚è≥",
            OrderStatus.PRODUCTION: "üîß",
            OrderStatus.TESTING: "üîç",
            OrderStatus.PICKING: "üì¶",
            OrderStatus.SHIPPED: "üöö",
            OrderStatus.DELIVERED: "‚úÖ"
        }
        
        icon = status_icons.get(order.status, "üìã")
        response['body'] += f"{icon} **Statut actuel : {order.status.value.upper()}**\n\n"
        
        # D√©tails selon le statut
        status_details = {
            OrderStatus.PRODUCTION: "Votre PC est en cours d'assemblage dans nos ateliers.",
            OrderStatus.TESTING: "Votre PC est en phase de test qualit√© (burn test 24h).",
            OrderStatus.PICKING: "Votre commande est pr√™te et en attente de prise en charge par le transporteur.",
            OrderStatus.SHIPPED: f"Votre colis a √©t√© exp√©di√©. [Suivre le colis]({order.tracking_url})" if order.tracking_url else "Votre colis a √©t√© exp√©di√©.",
        }
        
        if order.status in status_details:
            response['body'] += status_details[order.status] + "\n\n"
        
        # Ajouter estimation si pas encore exp√©di√©
        if order.status not in [OrderStatus.SHIPPED, OrderStatus.DELIVERED]:
            response['body'] += f"‚Ä¢ Command√© le : {order.order_date.strftime('%d/%m/%Y')}\n"
            response['body'] += f"‚Ä¢ Jours √©coul√©s : {order.days_since_payment}/12\n"
            
        response['body'] += "\nPuis-je vous aider pour autre chose ?"
        return response
    
    def _handle_problem(self, order: Order, response: Dict, context: Dict) -> Dict:
        """G√®re les probl√®mes de livraison"""
        
        response['actions'].append('check_delivery_issue')
        
        # Si d√©lai d√©pass√©
        if not order.is_within_legal_delay:
            response['body'] = "Je comprends votre inqui√©tude concernant votre commande.\n\n"
            response['body'] += f"‚ö†Ô∏è Le d√©lai l√©gal de 12 jours est effectivement d√©pass√© "
            response['body'] += f"({order.days_since_payment} jours).\n\n"
            response['body'] += "Je transf√®re imm√©diatement votre r√©clamation √† notre √©quipe "
            response['body'] += "pour un traitement prioritaire. Un op√©rateur vous contactera "
            response['body'] += "dans les plus brefs d√©lais."
            response['escalate'] = True
            response['escalation_reason'] = "Probl√®me livraison + d√©lai d√©pass√©"
        else:
            response['body'] = "Je comprends votre pr√©occupation concernant votre commande.\n\n"
            response['body'] += f"Votre commande {order.order_id} est actuellement "
            response['body'] += f"en statut : **{order.status.value}**\n\n"
            
            if order.status == OrderStatus.SHIPPED:
                response['body'] += "Votre colis a bien √©t√© exp√©di√©. "
                if order.tracking_url:
                    response['body'] += f"Vous pouvez suivre sa progression : [Tracking UPS]({order.tracking_url})\n\n"
                response['body'] += "Si le colis semble perdu ou bloqu√©, je vais transf√©rer "
                response['body'] += "votre demande √† notre √©quipe logistique."
                response['escalate'] = True
                response['escalation_reason'] = "Probl√®me avec colis exp√©di√©"
            else:
                remaining = order.remaining_days
                response['body'] += f"Nous sommes encore dans les d√©lais l√©gaux "
                response['body'] += f"(il reste {remaining} jours).\n\n"
                response['body'] += "Cependant, si vous avez des inqui√©tudes particuli√®res, "
                response['body'] += "je peux transf√©rer votre demande √† un op√©rateur."
                
        return response
    
    def _handle_address_change(self, order: Order, response: Dict, context: Dict) -> Dict:
        """G√®re les changements d'adresse"""
        
        response['actions'].append('address_change_request')
        response['body'] = "Vous souhaitez modifier l'adresse de livraison.\n\n"
        
        if order.status in [OrderStatus.SHIPPED, OrderStatus.DELIVERED]:
            response['body'] += "‚ö†Ô∏è Votre commande a d√©j√† √©t√© exp√©di√©e. "
            response['body'] += "Il n'est plus possible de modifier l'adresse.\n\n"
            if order.tracking_url:
                response['body'] += f"Vous pouvez contacter directement UPS : {order.tracking_url}\n\n"
        else:
            response['body'] += "Je transf√®re votre demande de changement d'adresse "
            response['body'] += "√† notre √©quipe logistique qui pourra effectuer la modification."
            response['escalate'] = True
            response['escalation_reason'] = "Changement d'adresse demand√©"
            
        return response
    
    def _handle_unknown(self, order: Order, response: Dict, context: Dict) -> Dict:
        """G√®re les cas non identifi√©s"""
        
        response['body'] = f"Je vois que votre demande concerne votre commande {order.order_id}.\n\n"
        response['body'] += f"‚Ä¢ Statut actuel : {order.status.value}\n"
        response['body'] += f"‚Ä¢ Command√©e le : {order.order_date.strftime('%d/%m/%Y')}\n\n"
        response['body'] += "Pour mieux vous aider, je transf√®re votre demande √† un op√©rateur."
        response['escalate'] = True
        response['escalation_reason'] = "Demande non identifi√©e automatiquement"
        
        return response